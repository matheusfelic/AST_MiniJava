/*
   Simple +/-/* expression language;
   parser evaluates constant expressions on the fly
*/
 
package cup.example;
 
import ast.*;
import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
 
parser code {:
    protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  }
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};
 
/* Terminals (tokens returned by the scanner). */
terminal CLASS, PUBLIC, EXTENDS, STATIC, VOID, INT, STRING, BOOLEAN, WHILE, IF,
 			ELSE, RETURN, FALSE, TRUE, THIS, NEW, MAIN, AND, LT,PLUS, MINUS, MULT, NOT, ASSIGN, SEMICOLON,
 			 	COMMA, DOT, PARENTHLEFT, PARENTHRIGHT, BRACKETSLEFT, BRACKETSRIGHT, CURLBRACKETSLEFT, CURLBRACKETSRIGHT, SYSO, LENGTH;
terminal Integer    NUMBER_LIT;
terminal String     IDENTIFIER;
 
/* Non terminals */
non terminal   Program Goal;
non terminal   ClassDecl ClassDeclaration;
non terminal   Identifier Identifier;
non terminal   MainClass MainClass;
non terminal   VarDecl VarDeclaration;
non terminal   MethodDecl MethodDeclaration;
non terminal   Statement Statement;
non terminal   Type Type;
non terminal   Exp Expression;
non terminal   ClassDeclList ClassDeclarations;
non terminal   VarDeclList VarDeclarations;
non terminal   MethodDeclList MethodDeclarations;
non terminal   StatementList Statements;
non terminal   ExpList ExpressionList;
/*non terminal   Argument Arg;
non terminal   ArgumentList Args;
*/non terminal   Formal Formal;
non terminal   FormalList Formals;
 
/* Precedences */
 
precedence left AND;
precedence left NOT;
precedence left LT;
precedence left PLUS , MINUS;
precedence left MULT;
precedence left DOT;
precedence left BRACKETSLEFT;
precedence left PARENTHLEFT;
precedence left CURLBRACKETSLEFT;
precedence left VarDeclaration;
precedence left ASSIGN;
/* The grammar rules */
//Start
 
Goal  ::= MainClass:mc  ClassDeclarations:cs  {: RESULT = new Program(mc, cs); :};
 
//Auxiliar
 
ClassDeclarations ::= {: RESULT = new ClassDeclList(); :}
                    | ClassDeclarations:cl ClassDeclaration:c  {: cl.addElement(c); RESULT = cl; :};
ExpressionList ::= {: RESULT = new ExpList(); :}
                    | ExpressionList:el Expression:e  {: el.addElement(e); RESULT = el; :};
                    
VarDeclarations ::= {: RESULT = new VarDeclList();:}
                  | VarDeclarations:vl VarDeclaration:v  {: vl.addElement(v); RESULT = vl;:};
MethodDeclarations ::= {:RESULT = new MethodDeclList();:}
                     | MethodDeclarations:ml MethodDeclaration:m  {: ml.addElement(m); RESULT = ml;:};
Statements ::= {:RESULT = new StatementList();:}
             | Statement:s Statements:sl {:sl.addElement(s); RESULT = sl;:};
Formals ::={:RESULT = new FormalList();:}
					| Formals:fl Formal:f {: fl.addElement(f); RESULT = fl;:}; 
 /*ExtraArgs::= {:RESULT = "";:}
  | COMMA Type:tp Identifier:id ExtraArgs:eArgs
    {:sb.setLength(0);RESULT = sb.append(", ").append(tp).append(" ").append(id).append(eArgs).toString();:};
   */ 
/*Arguments ::= {:RESULT = new ;:}
          | Type:tp Identifier:id Args:eArgs {:sb.setLength(0);RESULT = sb.append(tp).append(" ").append(id).append(eArgs).toString();:};
*/
/*ExpArguments ::= {:RESULT = "";:}
  | Expression:exp ExtraExpArgs:eArgs
  {:sb.setLength(0);RESULT = sb.append(exp).append(eArgs).toString();:};
ExtraExpArgs::= {:RESULT = "";:}
  | COMMA Expression:exp ExtraExpArgs:eArgs
    {:sb.setLength(0);RESULT = sb.append(", ").append(exp).append(eArgs).toString();:};
*/
 
//Other
 
MainClass ::= CLASS Identifier:id CURLBRACKETSLEFT PUBLIC STATIC VOID MAIN PARENTHLEFT STRING BRACKETSLEFT BRACKETSRIGHT Identifier:arg PARENTHRIGHT CURLBRACKETSLEFT Statement:stm CURLBRACKETSRIGHT CURLBRACKETSRIGHT
        {: RESULT = new MainClass(id,arg, stm); :};
 
ClassDeclaration  ::=  CLASS Identifier:id EXTENDS Identifier:exId CURLBRACKETSLEFT VarDeclarations:vars MethodDeclarations:methods CURLBRACKETSRIGHT
                {: RESULT = new ClassDeclExtends(id, exId, vars, methods);:}
                      | CLASS Identifier:id CURLBRACKETSLEFT VarDeclarations:vars MethodDeclarations:methods CURLBRACKETSRIGHT
                            {: RESULT = new ClassDeclSimple(id, vars, methods); :};
                            
                            
 
VarDeclaration  ::= Type:tp Identifier:id SEMICOLON {:RESULT = new VarDecl(tp,id);:};           
 
MethodDeclaration ::= PUBLIC Type:tp Identifier:id PARENTHLEFT Formals:args PARENTHRIGHT CURLBRACKETSLEFT VarDeclarations:vars Statements:stmts RETURN Expression:retExp SEMICOLON CURLBRACKETSRIGHT
           {: RESULT = new MethodDecl(tp,id,args,vars,stmts,retExp); :};
 
 
Type  ::= INT BRACKETSLEFT BRACKETSRIGHT  {:RESULT = new IntArrayType();:}
        | BOOLEAN             {:RESULT = new BooleanType();:}
        | INT                 {:RESULT = new IntegerType();:}
        | IDENTIFIER:id           {:RESULT = new IdentifierType(id);:};
 
 
Statement ::= CURLBRACKETSLEFT Statements:stmts CURLBRACKETSRIGHT {: RESULT= new Block(stmts); :}
            | IF PARENTHLEFT Expression:exp PARENTHRIGHT Statement:stmt ELSE Statement:stmt2 {: RESULT= new If(exp, stmt, stmt2);:}
            | WHILE PARENTHLEFT Expression:exp PARENTHRIGHT Statement:stmt {: RESULT= new While(exp,stmt); :}
            | SYSO PARENTHLEFT Expression:exp PARENTHRIGHT SEMICOLON {: RESULT= new Print(exp);:}
            | Identifier:id ASSIGN Expression:exp SEMICOLON {: RESULT= new Assign(id,exp); :}
            | Identifier:id BRACKETSLEFT Expression:indexExp BRACKETSRIGHT ASSIGN Expression:exp SEMICOLON {: RESULT= new ArrayAssign(id, indexExp, exp); :};
 
ExpressionList ::= ExpressionList:el Expression:e SEMICOLON   {: el.addElement(e); RESULT = el; :}
            |                            {: RESULT = new ExpList(); :};
 
Expression  ::= Expression:e1 PLUS Expression:e2 {:RESULT = new Plus(e1,e2);:}
              | Expression:e1 MINUS Expression:e2 {:RESULT = new Minus(e1,e2);:}
              | Expression:e1 AND Expression:e2 {:RESULT = new And(e1,e2);:}
              | Expression:e1 MULT Expression:e2 {:RESULT = new Times(e1,e2);:}
              | Expression:e1 LT Expression:e2 {:RESULT = new LessThan(e1,e2);:}
              | Expression:e1 BRACKETSLEFT Expression:ebrkt BRACKETSRIGHT {:RESULT = new ArrayLookup(e1,ebrkt);:}
              | Expression:exp DOT LENGTH {: RESULT = new ArrayLength(exp); :}
              | Expression:exp DOT Identifier:id PARENTHLEFT ExpressionList:args PARENTHRIGHT {: RESULT = new Call(exp,id,args);:}
              | NUMBER_LIT:num {: RESULT = new IntegerLiteral(num);:}
              | TRUE  {:RESULT = new True(); :}
              | FALSE   {:RESULT = new False(); :}
              | IDENTIFIER:id {: RESULT = new IdentifierExp(id); :}
              | THIS {:RESULT = new This(); :}
              | NEW INT BRACKETSLEFT Expression:exp BRACKETSRIGHT {:RESULT = new NewArray(exp);:}
              | NEW Identifier:id PARENTHLEFT PARENTHRIGHT {: RESULT = new NewObject(id); :}
              | NOT Expression:exp{:RESULT = new Not(exp); :};
              // PARENTHLEFT Expression:exp PARENTHRIGHT {: RESULT = new  :};
 
 
Identifier ::= IDENTIFIER:id {: RESULT = new Identifier(id); :};